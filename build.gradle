/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Gradle plugin project to get you started.
 * For more details take a look at the Writing Custom Plugins chapter in the Gradle
 * User Manual available at https://docs.gradle.org/5.6.3/userguide/custom_plugins.html
 */

plugins {
    // Apply the Java Gradle plugin development plugin to add support for developing Gradle plugins
    id 'idea'
    id 'jacoco'
    id 'maven-publish'
    id 'java-gradle-plugin'
    id 'org.sonarqube' version '5.1.0.4882'
    id 'com.gradle.plugin-publish' version '1.3.0'
    id 'com.github.sherter.google-java-format' version '0.9'
    id 'io.github.gradle-nexus.publish-plugin' version '2.0.0'
    id 'org.owasp.dependencycheck' version '10.0.4'
}

ext {
    bcRepo = 'https://github.com/bancolombia/scaffold-clean-architecture'
    bcPluginName = 'Scaffold Clean Architecture Bancolombia'
    bcPluginDescription = 'Gradle plugin to create a clean application in Java that already works, It follows our best practices!'
}

group 'co.com.bancolombia.cleanArchitecture'
version System.getProperty('version')

repositories {
    mavenCentral()
}

compileJava {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

test {
    maxParallelForks = 2
    useJUnitPlatform()
}

if (project.hasProperty('signing.keyId')) { // publish as library in maven central
    apply plugin: 'signing'
    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java

                pom {
                    name = bcPluginName
                    description = bcPluginDescription
                    url = bcRepo
                    licenses {
                        license {
                            name = "APACHE LICENSE, VERSION 2.0"
                            url = "https://www.apache.org/licenses/LICENSE-2.0"
                            distribution = "repo"
                        }
                    }
                    developers {
                        developer {
                            id = "santitigaga"
                            name = "Santiago Garcia Gil"
                            email = "santitigaga@hotmail.com"
                        }
                        developer {
                            id = "juancgalvis"
                            name = "Juan Carlos Galvis"
                            email = "juanc.galvis@outlook.com"
                        }
                    }
                    scm {
                        url = bcRepo
                    }
                }
            }
        }
    }

    nexusPublishing {
        repositories {
            sonatype() {
                group = "com.github.bancolombia"
            }
        }
    }

    signing {
        sign(publishing.publications.mavenJava)
    }

    java {
        withJavadocJar()
        withSourcesJar()
    }

    javadoc {
        if (JavaVersion.current().isJava9Compatible()) {
            options.addBooleanOption('html5', true)
        }
    }
    javadoc.failOnError = false

    tasks.withType(GenerateModuleMetadata).configureEach {
        enabled = false
    }

    def signingTasks = tasks.withType(Sign)
    signingTasks.forEach { project.logger.lifecycle('task sign: ' + it.name) }
    tasks.withType(PublishToMavenRepository).configureEach { task ->
        project.logger.lifecycle('task publish: ' + task.name)
        if (task.name == 'publishMavenJavaPublicationToSonatypeRepository') {
            project.logger.lifecycle('Applied to ' + task.name)
            task.mustRunAfter('signMavenJavaPublication')
            task.mustRunAfter('signPluginMavenPublication')
        } else {
            task.enabled = false
        }
    }
} else { // publish as plugin in gradle and github
    publishing {
        repositories {
            maven {
                name = "GitHubPackages"
                url = uri("https://maven.pkg.github.com/bancolombia/scaffold-clean-architecture")
                credentials {
                    username = System.getenv("GITHUB_ACTOR")
                    password = System.getenv("GITHUB_TOKEN")
                }
            }
        }
    }

    gradlePlugin {
        // Define the plugin
        website = 'https://github.com/bancolombia/scaffold-clean-architecture'
        vcsUrl = 'https://github.com/bancolombia/scaffold-clean-architecture'

        plugins {
            cleanArchitecture {
                id = 'co.com.bancolombia.cleanArchitecture'
                displayName = bcPluginName
                description = bcPluginDescription
                implementationClass = 'co.com.bancolombia.PluginClean'
                tags.set(['scaffold', 'cleanArchitecture', 'Bancolombia', 'OpenSource'])
            }
        }
    }

    // Add a source set for the functional test suite
    sourceSets {
        functionalTest {
        }
    }

    gradlePlugin.testSourceSets(sourceSets.functionalTest)
    configurations.functionalTestImplementation.extendsFrom(configurations.testImplementation)

    // Add a task to run the functional tests
    tasks.register('functionalTest', Test) {
        description = 'Runs functional tests.'
        group = 'verification'
        testClassesDirs = sourceSets.functionalTest.output.classesDirs
        classpath = sourceSets.functionalTest.runtimeClasspath
    }

    check {
        // Run the functional tests as part of `check`
        dependsOn(tasks.functionalTest)
    }
}

dependencies {
    api 'com.github.spullara.mustache.java:compiler:0.9.14'
    api 'com.fasterxml.jackson.core:jackson-databind:2.18.0'
    api 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.18.0'
    api 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.18.0'
    api 'commons-io:commons-io:2.17.0'
    api gradleApi()

    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.18.0'
    implementation 'org.reflections:reflections:0.10.2'
    // swagger generators
    implementation('io.swagger.codegen.v3:swagger-codegen-generators:1.0.53') {
        exclude group: 'net.sf.jopt-simple', module: 'jopt-simple'
    }
    constraints { // for previous swagger dependency
        implementation('commons-codec:commons-codec:1.17.1') {
            because "This version closes a security vulnerability"
        }
    }
    implementation 'com.googlecode.lambdaj:lambdaj:2.3.3'
    implementation 'com.google.googlejavaformat:google-java-format:1.24.0'

    testImplementation gradleTestKit()
    testImplementation 'org.mockito:mockito-junit-jupiter:5.14.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.11.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.11.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.11.2'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher:1.11.2'

    compileOnly 'org.projectlombok:lombok:1.18.34'
    annotationProcessor 'org.projectlombok:lombok:1.18.34'
    implementation 'com.squareup.okhttp3:okhttp:4.12.0'
    testImplementation 'com.squareup.okhttp3:mockwebserver:4.12.0'
}

jacocoTestReport {
    dependsOn(tasks.test)
    reports {
        xml.setRequired true
        xml.setOutputLocation layout.buildDirectory.file("reports/jacoco/report.xml")
        html.setRequired true
        csv.setRequired false
    }
}

sonar {
    properties {
        property "sonar.organization", "grupo-bancolombia"
        property "sonar.projectKey", "bancolombia_scaffold-clean-architecture"
        property "sonar.host.url", "https://sonarcloud.io/"

        property "sonar.sources", "."
        property "sonar.java.binaries", "build/classes"
        property "sonar.junit.reportPaths", "build/test-results/test"
        property "sonar.java-coveragePlugin", "jacoco"
        property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacoco/report.xml"
        property "sonar.test", "src/test/java"
        property "sonar.exclusions", "docs/**,.github/**,src/functionalTest/**,src/test/**/*Test.java,**/**models**,src/test/**/TestUtils.java,src/test/**/*Provider.java,**/**exceptions**,**/examples-ca/**,src/test/**/AnUpdate*.java,**/LocalTasks.java"
        property "sonar.sourceEncoding", "UTF-8"
    }
}

googleJavaFormat {
    toolVersion = "1.7"
    exclude '**/examples-ca/**'
    exclude '**/UtilsTest.java'
}

dependencyCheck {
    format = 'JSON'
    failOnError = false
}

////////////////////////////////////////////////////////////////////////
//
//  Google Java Format pre-commit hook installation
//  Semantic Commit Hook installation
//
// 
tasks.register('copyPreCommit', Copy) {
    from 'config/hooks/pre-commit'
    into '.git/hooks'
    fileMode 0777
}

tasks.register('downloadCommitMessage') {
    def f = new File('.git/hooks/commit-msg.sample2')
    if (!f.exists()) {
        new URL('https://raw.githubusercontent.com/hazcod/semantic-commit-hook/master/commit-msg').withInputStream { i -> f.withOutputStream { it << i } }
    }
}

tasks.register('fileModeCommitMessage', Copy) {
    dependsOn 'downloadCommitMessage', 'copyPreCommit'
    from '.git/hooks/commit-msg.sample2'
    into '.git/hooks/'
    rename 'commit-msg.sample2', 'commit-msg'
    fileMode 0777
}

tasks.register('installGitHooks') {
    dependsOn 'copyPreCommit', 'downloadCommitMessage', 'fileModeCommitMessage'
    doLast {
        println 'GitHooks installed!'
    }
}

tasks.named('wrapper') {
    gradleVersion = '8.10.2'
}

tasks.register('ci-updater', JavaExec) {
    // Replace com.example.MainClass with the fully qualified name of your main class
    mainClass = 'co.com.bancolombia.utils.offline.LocalTasks'
    classpath = sourceSets.main.runtimeClasspath
    // Add any additional JVM arguments if needed
    // jvmArgs = ['-Xmx512m']
}