/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Gradle plugin project to get you started.
 * For more details take a look at the Writing Custom Plugins chapter in the Gradle
 * User Manual available at https://docs.gradle.org/5.6.3/userguide/custom_plugins.html
 */

plugins {
    // Apply the Java Gradle plugin development plugin to add support for developing Gradle plugins
    id 'java-gradle-plugin'
    id 'jacoco'
    id 'idea'
    id 'com.gradle.plugin-publish' version '1.2.0'
    id 'org.sonarqube' version '4.0.0.2929'
    id 'com.github.sherter.google-java-format' version '0.9'
    id 'maven-publish'
    id 'io.github.gradle-nexus.publish-plugin' version '1.3.0'
}

ext {
    bcRepo = 'https://github.com/bancolombia/scaffold-clean-architecture'
    bcPluginName = 'Scaffold Clean Architecture Bancolombia'
    bcPluginDescription = 'Gradle plugin to create a clean application in Java that already works, It follows our best practices!'
}

group 'co.com.bancolombia.cleanArchitecture'
version System.getProperty('version')

repositories {
    mavenCentral()
}

compileJava {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

if (project.hasProperty('signing.keyId')) { // publish as library in maven central
    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java

                pom {
                    name = bcPluginName
                    description = bcPluginDescription
                    url = bcRepo
                    licenses {
                        license {
                            name = "APACHE LICENSE, VERSION 2.0"
                            url = "https://www.apache.org/licenses/LICENSE-2.0"
                            distribution = "repo"
                        }
                    }
                    developers {
                        developer {
                            id = "santitigaga"
                            name = "Santiago Garcia Gil"
                            email = "santitigaga@hotmail.com"
                        }
                        developer {
                            id = "juancgalvis"
                            name = "Juan Carlos Galvis"
                            email = "juanc.galvis@outlook.com"
                        }
                    }
                    scm {
                        url = bcRepo
                    }
                }
            }
        }
    }

    nexusPublishing {
        repositories {
            sonatype() {
                group = "com.github.bancolombia"
            }
        }
    }

    signing {
        sign(publishing.publications.mavenJava)
    }

    java {
        withJavadocJar()
        withSourcesJar()
    }

    javadoc {
        if (JavaVersion.current().isJava9Compatible()) {
            options.addBooleanOption('html5', true)
        }
    }
    javadoc.failOnError = false

    tasks.withType(GenerateModuleMetadata) {
        enabled = false
    }

    def signingTasks = tasks.withType(Sign)
    signingTasks.forEach {project.logger.lifecycle('task sign: ' + it.name)}
    tasks.withType(PublishToMavenRepository).configureEach { task ->
        project.logger.lifecycle('task publish: ' + task.name)
        if(task.name == 'publishMavenJavaPublicationToSonatypeRepository') {
            project.logger.lifecycle('Applied to ' + task.name)
            task.mustRunAfter('signMavenJavaPublication')
        } else {
            task.enabled = false;
        }
    }
} else { // publish as plugin in gradle and github
    publishing {
        repositories {
            maven {
                name = "GitHubPackages"
                url = uri("https://maven.pkg.github.com/bancolombia/scaffold-clean-architecture")
                credentials {
                    username = System.getenv("GITHUB_ACTOR")
                    password = System.getenv("GITHUB_TOKEN")
                }
            }
        }
    }

    gradlePlugin {
        // Define the plugin
        website = 'https://github.com/bancolombia/scaffold-clean-architecture'
        vcsUrl = 'https://github.com/bancolombia/scaffold-clean-architecture'

        plugins {
            cleanArchitecture {
                id = 'co.com.bancolombia.cleanArchitecture'
                displayName = bcPluginName
                description = bcPluginDescription
                implementationClass = 'co.com.bancolombia.PluginClean'
                tags.set(['scaffold', 'cleanArchitecture', 'Bancolombia', 'OpenSource'])
            }
        }
    }

// Add a source set for the functional test suite
    sourceSets {
        functionalTest {
        }
    }

    gradlePlugin.testSourceSets(sourceSets.functionalTest)
    configurations.functionalTestImplementation.extendsFrom(configurations.testImplementation)

// Add a task to run the functional tests
    tasks.register('functionalTest', Test) {
        description = 'Runs functional tests.'
        group = 'verification'
        testClassesDirs = sourceSets.functionalTest.output.classesDirs
        classpath = sourceSets.functionalTest.runtimeClasspath
    }

    check {
        // Run the functional tests as part of `check`
        dependsOn(tasks.functionalTest)
    }

}

dependencies {
    api 'com.github.spullara.mustache.java:compiler:0.9.10'
    api 'com.fasterxml.jackson.core:jackson-databind:2.15.1'
    api 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.15.1'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.15.1'
    implementation 'org.reflections:reflections:0.10.2'
    api 'commons-io:commons-io:2.12.0'
    api gradleApi()
    testImplementation 'org.mockito:mockito-core:4.5.1'
    testImplementation 'junit:junit:4.13.2'
    testImplementation gradleTestKit()

    compileOnly 'org.projectlombok:lombok:1.18.26'
    annotationProcessor 'org.projectlombok:lombok:1.18.26'
    implementation 'com.squareup.okhttp3:okhttp:4.10.0'
    testImplementation 'com.squareup.okhttp3:mockwebserver:4.10.0'
}

jacocoTestReport {
    dependsOn(tasks.test)
    reports {
        xml.setRequired true
        xml.setOutputLocation file("${buildDir}/reports/jacoco/report.xml")
        html.setRequired true
        csv.setRequired false
    }
}

sonarqube {
    properties {
        property "sonar.organization", "grupo-bancolombia"
        property "sonar.projectKey", "bancolombia_scaffold-clean-architecture"
        property "sonar.host.url", "https://sonarcloud.io/"

        property "sonar.sources", "."
        property "sonar.java.binaries", "build/classes"
        property "sonar.junit.reportPaths", "build/test-results/test"
        property "sonar.java-coveragePlugin", "jacoco"
        property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacoco/report.xml"
        property "sonar.test", "src/test/java"
        property "sonar.exclusions", ".github/**,src/functionalTest/**,src/test/**/*Test.java,**/**models**,src/test/**/*Provider.java,**/**exceptions**,**/examples-ca/**,src/test/**/AnUpdate*.java"
        property "sonar.sourceEncoding", "UTF-8"
    }
}

googleJavaFormat {
    toolVersion = "1.7"
    exclude '**/examples-ca/**'
}

////////////////////////////////////////////////////////////////////////
//
//  Google Java Format pre-commit hook installation
//

tasks.register('installGitHooks', Copy) {
    from(file('config/hooks/pre-commit')) {
        rename 'pre-commit', 'pre-commit'
    }
    into file('.git/hooks')
    fileMode 0777
}

tasks.named('wrapper') {
    gradleVersion = '8.1.1'
}

tasks.withType(PublishToMavenRepository).configureEach {
    dependsOn('signPluginMavenPublication')
}
