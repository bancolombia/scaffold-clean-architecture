/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package co.com.bancolombia;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Writer;
import java.nio.file.FileVisitResult;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.attribute.BasicFileAttributes;
import org.apache.commons.io.file.SimplePathVisitor;
import org.gradle.testkit.runner.BuildResult;
import org.gradle.testkit.runner.GradleRunner;
import org.gradle.testkit.runner.TaskOutcome;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.Test;

/** A simple functional test for the 'co.com.bancolombia.greeting' plugin. */
public class UpdatePluginFunctionalTest {
  static File projectDir = new File("build/functionalTest");
  GradleRunner runner;

  @Before
  public void init() throws IOException {
    // Setup the test build
    deleteStructure(projectDir.toPath());
    Files.createDirectories(projectDir.toPath());
    writeString(new File(projectDir, "settings.gradle"), "");
    writeString(
        new File(projectDir, "build.gradle"),
        "plugins {" + "  id('co.com.bancolombia.cleanArchitecture')" + "}");
    runner = GradleRunner.create();
    runner.forwardOutput();
    runner.withPluginClasspath();
  }

  @AfterClass
  public static void clean() {
    deleteStructure(projectDir.toPath());
  }

  private static void deleteStructure(Path sourcePath) {

    try {
      Files.walkFileTree(
          sourcePath,
          new SimplePathVisitor() {
            @Override
            public FileVisitResult postVisitDirectory(Path dir, IOException e) throws IOException {
              Files.delete(dir);
              return FileVisitResult.CONTINUE;
            }

            @Override
            public FileVisitResult visitFile(final Path file, final BasicFileAttributes attrs)
                throws IOException {
              Files.delete(file);
              return FileVisitResult.CONTINUE;
            }
          });
    } catch (IOException e) {
      System.out.println("error delete Structure " + e.getMessage());
    }
  }

  @Test
  public void shouldUpdateProject() {
    canRunTaskGenerateStructureWithOutParameters();

    String task = "updateCleanArchitecture";

    runner.withArguments(task);
    runner.withProjectDir(projectDir);
    BuildResult result = runner.build();

    assertEquals(result.task(":" + task).getOutcome(), TaskOutcome.SUCCESS);
  }

  @Test
  public void shouldUpdateProjectWithOneDependency() {
    canRunTaskGenerateStructureWithOutParameters();
    String task = "updateCleanArchitecture";

    runner.withArguments(task, "--dependencies=org.mockito:mockito-core org.projectlombok:lombok");
    runner.withProjectDir(projectDir);
    BuildResult result = runner.build();

    assertEquals(result.task(":" + task).getOutcome(), TaskOutcome.SUCCESS);
  }

  public void canRunTaskGenerateStructureWithOutParameters() {

    String task = "ca";

    runner.withArguments(task);
    runner.withProjectDir(projectDir);
    BuildResult result = runner.build();
    // Verify the result
    assertTrue(new File("build/functionalTest/README.md").exists());
    assertTrue(new File("build/functionalTest/.gitignore").exists());
    assertTrue(new File("build/functionalTest/build.gradle").exists());
    assertTrue(new File("build/functionalTest/lombok.config").exists());
    assertTrue(new File("build/functionalTest/main.gradle").exists());
    assertTrue(new File("build/functionalTest/settings.gradle").exists());

    assertTrue(new File("build/functionalTest/infrastructure/driven-adapters/").exists());
    assertTrue(new File("build/functionalTest/infrastructure/entry-points").exists());
    assertTrue(new File("build/functionalTest/infrastructure/helpers").exists());

    assertTrue(
        new File("build/functionalTest/domain/model/src/main/java/co/com/bancolombia/model")
            .exists());
    assertTrue(
        new File("build/functionalTest/domain/model/src/test/java/co/com/bancolombia/model")
            .exists());
    assertTrue(new File("build/functionalTest/domain/model/build.gradle").exists());
    assertTrue(
        new File("build/functionalTest/domain/usecase/src/main/java/co/com/bancolombia/usecase")
            .exists());
    assertTrue(
        new File("build/functionalTest/domain/usecase/src/test/java/co/com/bancolombia/usecase")
            .exists());
    assertTrue(new File("build/functionalTest/domain/usecase/build.gradle").exists());

    assertTrue(new File("build/functionalTest/applications/app-service/build.gradle").exists());
    assertTrue(
        new File(
                "build/functionalTest/applications/app-service/src/main/java/co/com/bancolombia/MainApplication.java")
            .exists());
    assertTrue(
        new File(
                "build/functionalTest/applications/app-service/src/main/java/co/com/bancolombia/config/UseCasesConfig.java")
            .exists());
    assertTrue(
        new File(
                "build/functionalTest/applications/app-service/src/main/java/co/com/bancolombia/config")
            .exists());
    assertTrue(
        new File(
                "build/functionalTest/applications/app-service/src/main/resources/application.yaml")
            .exists());
    assertTrue(
        new File(
                "build/functionalTest/applications/app-service/src/main/resources/log4j2.properties")
            .exists());
    assertTrue(
        new File("build/functionalTest/applications/app-service/src/test/java/co/com/bancolombia")
            .exists());

    assertEquals(result.task(":" + task).getOutcome(), TaskOutcome.SUCCESS);
  }

  private void writeString(File file, String string) throws IOException {
    try (Writer writer = new FileWriter(file)) {
      writer.write(string);
    }
  }
}
