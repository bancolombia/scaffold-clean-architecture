package {{package}}.rsocket.service

import org.springframework.messaging.rsocket.RSocketRequester
import org.springframework.stereotype.Service
import reactor.core.publisher.Flux
import reactor.core.publisher.Mono


@Service
class RsocketAdapter // implements Gateway from domain
    (private val rSocketRequester: RSocketRequester) {
    // interaction model Request/Response
    fun callRouteRequest(objRequest: Any? /* change for object request */): Mono<Any> {
        return rSocketRequester
            .route("route.request.response")
            .data(objRequest)
            .retrieveMono(Any::class.java)
            .log()
    }

    // interaction model Fire-and-Forget
    fun callRouteFireForget(objRequest: Any? /* change for object request */): Mono<Void> {
        return rSocketRequester
            .route("route.fire.forget")
            .data(objRequest)
            .send()
            .log()
    }

    // interaction model Request/Stream
    fun callRouteRequestStream(): Flux<Any> {
        return rSocketRequester
            .route("route.request.stream")
            .retrieveFlux(Any::class.java)
            .log()
    }

    // interaction model Channel
    fun callRouteChannel(objRequest: Flux<Any?>?): Flux<Any> {
        return rSocketRequester
            .route("route.channel")
            .data(objRequest)
            .retrieveFlux(Any::class.java)
            .log()
    }
}
