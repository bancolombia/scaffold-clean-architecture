package {{package}}.s3.operations

import org.springframework.stereotype.Component
import software.amazon.awssdk.core.sync.RequestBody
import software.amazon.awssdk.services.s3.S3Client
import software.amazon.awssdk.services.s3.model.*
import java.io.File
import java.io.InputStream


@Component
class S3Operations(private val s3Client: S3Client) {
    
    fun uploadObject(bucketName: String, objectKey: String, fileContent: ByteArray?): Boolean {
        return s3Client.putObject(
            configurePutObject(bucketName, objectKey),
            RequestBody.fromBytes(fileContent)
        ).sdkHttpResponse().isSuccessful
    }

    fun uploadObject(bucketName: String, objectKey: String, fileContent: String?): Boolean {
        return s3Client.putObject(
            configurePutObject(bucketName, objectKey),
            RequestBody.fromString(fileContent)
        ).sdkHttpResponse().isSuccessful
    }

    fun uploadObject(bucketName: String, objectKey: String, fileContent: File?): Boolean {
        return s3Client.putObject(
            configurePutObject(bucketName, objectKey),
            RequestBody.fromFile(fileContent)
        ).sdkHttpResponse().isSuccessful
    }

    fun listBucketObjects(bucketName: String?): List<S3Object> {
        return s3Client.listObjects(
            ListObjectsRequest
                .builder()
                .bucket(bucketName)
                .build()
        ).contents()
    }

    fun getObject(bucketName: String?, objectKey: String?): InputStream {
        return s3Client.getObjectAsBytes(
            GetObjectRequest.builder()
                .key(objectKey)
                .bucket(bucketName)
                .build()
        ).asInputStream()
    }

    fun deleteObject(bucketName: String?, objectKey: String?): Boolean {
        return s3Client.deleteObject(
            DeleteObjectRequest.builder()
                .key(objectKey)
                .bucket(bucketName).build()
        ).sdkHttpResponse().isSuccessful
    }

    private fun configurePutObject(bucketName: String, objectKey: String): PutObjectRequest {
        return PutObjectRequest.builder()
            .bucket(bucketName)
            .key(objectKey)
            .build()
    }
}
