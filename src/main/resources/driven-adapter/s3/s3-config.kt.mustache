package {{package}}.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Profile;
import software.amazon.awssdk.services.s3.S3Client;
import software.amazon.awssdk.services.s3.S3ClientBuilder;
import co.com.bancolombia.config.model.S3ConnectionProperties;
import software.amazon.awssdk.auth.credentials.AwsBasicCredentials;
import software.amazon.awssdk.auth.credentials.StaticCredentialsProvider;
import software.amazon.awssdk.regions.Region;

import java.net.URI;

@Configuration
class S3Config {

    @Profile({"dev", "cer", "pdn"})
    @Bean
    public fun s3Client(val s3Properties :S3ConnectionProperties): S3Client {
        return getBuilder(s3Properties).build();
    }

    @Profile("local")
    @Bean
    public fun localS3Client(val awsBasicCredentials :AwsBasicCredentials, val s3Properties :S3ConnectionProperties): S3Client {
        return getBuilder(s3Properties)
                .credentialsProvider(StaticCredentialsProvider.create(awsBasicCredentials))
                .endpointOverride(URI.create(s3Properties.getEndpoint()))
                .build();
    }

    private fun getBuilder(val s3Properties :S3ConnectionProperties): S3ClientBuilder {
        return S3Client.builder()
        .region(Region.of(s3Properties.getRegion()));
    }

}