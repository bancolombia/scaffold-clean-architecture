package {{package}}.event;

import {{package}}.model.event.gateways.EventsGateway;
{{#lombok}}
import lombok.RequiredArgsConstructor;
import lombok.extern.java.Log;
{{/lombok}}
import org.reactivecommons.api.domain.DomainEvent;
import org.reactivecommons.api.domain.DomainEventBus;
import org.reactivecommons.async.impl.config.annotations.EnableDomainEventBus;
import org.springframework.stereotype.Component;
import reactor.core.publisher.Mono;

import java.util.UUID;
import java.util.logging.Level;

import static reactor.core.publisher.Mono.from;

@Component
@EnableDomainEventBus
{{#lombok}}
@Log
@RequiredArgsConstructor
{{/lombok}}
/**Permite personalizar la emisi√≥n de eventos, enriquecerla o interceptarla.
 Por defecto delega el proceso en reactive-commons.

 Remplazar el tipo del objeto  event por le modelo correspondiente
 **/
public class ReactiveEventsGateway implements EventsGateway {

    private final DomainEventBus domainEventBus;

    {{^lombok}}
    public ReactiveEventsGateway(DomainEventBus domainEventBus) {
    this.domainEventBus = domainEventBus;
    }
    {{/lombok}}

    @Override
    public Mono<Void> emit(Object event) {
        log.log(Level.INFO, "Emitiendo evento de dominio: {0}: {1}", new String[]{(String) event, event.toString()});
        return from(domainEventBus.emit(new DomainEvent<>((String) event, UUID.randomUUID().toString(), event)));
    }
}
