package {{package}}.events

{{#lombok}}
import lombok.extern.java.Log
{{/lombok}}
import org.reactivecommons.api.domain.Command
import org.reactivecommons.async.api.AsyncQuery
import org.reactivecommons.async.api.DirectAsyncGateway
import org.reactivecommons.async.impl.config.annotations.EnableDirectAsyncGateway
import reactor.core.publisher.Mono

import java.util.UUID
{{#lombok}}
import java.util.logging.Level
{{/lombok}}

{{#lombok}}
@Log
{{/lombok}}
@EnableDirectAsyncGateway
class ReactiveDirectAsyncGateway(
     val gateway :DirectAsyncGateway) /*implements SomeGatewayFromDomain*/ {

    fun runRemoteJob(command :Any/*change for proper model*/) :Mono<Unit>  {
        {{#lombok}}
        log.log(Level.INFO, "Sending command: {0}: {1}", new String[]{SOME_COMMAND_NAME, command.toString()})
        {{/lombok}}
        return gateway.sendCommand(Command<>(SOME_COMMAND_NAME, UUID.randomUUID().toString(), command),
                TARGET_NAME)
    }

    fun requestForRemoteData(query :Any/*change for proper model*/) :Mono<Any>  {
        {{#lombok}}
        log.log(Level.INFO, "Sending query request: {0}: {1}", new String[]{SOME_QUERY_NAME, query.toString()})
        {{/lombok}}
        return gateway.requestReply(AsyncQuery<>(SOME_QUERY_NAME, query), TARGET_NAME, Object.class/*change for proper model*/)
    }
    companion object {
         val TARGET_NAME :String = "cleanArchitecture"// refers to remote spring.application.name property
         val SOME_COMMAND_NAME :String = "some.command.name"
         val SOME_QUERY_NAME :String = "some.query.name"
    }
}
