package {{package}}.events

import {{package}}.model.events.gateways.EventsGateway
import org.reactivecommons.api.domain.DomainEvent
import org.reactivecommons.api.domain.DomainEventBus
import org.reactivecommons.async.impl.config.annotations.EnableDomainEventBus
import reactor.core.publisher.Mono
import java.util.UUID
import reactor.core.publisher.Mono.from

@EnableDomainEventBus
open class ReactiveEventsGateway(private val domainEventBus: DomainEventBus) : EventsGateway {

    override fun emit(event: Any): Mono<Void> {
        return from(
            domainEventBus.emit(
                DomainEvent(
                    SOME_EVENT_NAME,
                    UUID.randomUUID().toString(),
                    event
                )
            )
        )
    }

    companion object {
        const val SOME_EVENT_NAME = "some.event.name"
    }
}
