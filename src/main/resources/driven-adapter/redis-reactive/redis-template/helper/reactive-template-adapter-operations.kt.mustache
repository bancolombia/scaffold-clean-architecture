package {{package}}.redis.template.helper

import org.reactivecommons.utils.ObjectMapper
import org.springframework.data.redis.connection.ReactiveRedisConnectionFactory
import org.springframework.data.redis.core.ReactiveRedisTemplate
import org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer
import org.springframework.data.redis.serializer.RedisSerializationContext
import reactor.core.publisher.Mono
import java.lang.reflect.ParameterizedType
import java.time.Duration
import java.util.function.Function


abstract class ReactiveTemplateAdapterOperations<E, K, V>(
    connectionFactory: ReactiveRedisConnectionFactory,
    private var mapper: ObjectMapper,
    private val toEntityFn: Function<V, E>
) {
    private val template: ReactiveRedisTemplate<K, V>
    private val dataClass: Class<V>

    private fun save(key: K, entity: E): Mono<E> {
        return Mono.just(entity)
            .map { entity: E -> toValue(entity) }
            .flatMap { value: V ->
                template.opsForValue().set(key, value)
            }
            .thenReturn(entity)
    }

    fun save(key: K, entity: E, expirationMillis: Long): Mono<E> {
        return save(key, entity)
            .flatMap { v: E ->
                template.expire(
                    key,
                    Duration.ofMillis(expirationMillis)
                ).thenReturn(v)
            }
    }

    fun findById(key: K): Mono<E> {
        return template.opsForValue()[key]
            .map { data: V -> toEntity(data) }
    }

    private fun toValue(entity: E): V {
        return mapper.map(entity, dataClass)
    }

    private fun toEntity(data: V?): E? {
        return if (data != null) toEntityFn.apply(data) else null
    }

    init {
        val genericSuperclass = this.javaClass.genericSuperclass as ParameterizedType
        dataClass = genericSuperclass.actualTypeArguments[2] as Class<V>
        val serializationContext = RedisSerializationContext.newSerializationContext<K, V>(
            Jackson2JsonRedisSerializer(dataClass)
        )
            .build()
        template = ReactiveRedisTemplate(connectionFactory, serializationContext)
    }
}
