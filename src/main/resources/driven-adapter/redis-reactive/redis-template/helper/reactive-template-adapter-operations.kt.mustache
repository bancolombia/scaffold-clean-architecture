package {{package}}.redis.template.helper;

import org.reactivecommons.utils.ObjectMapper;
import org.springframework.data.redis.connection.ReactiveRedisConnectionFactory;
import org.springframework.data.redis.core.ReactiveRedisTemplate;
import org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;
import org.springframework.data.redis.serializer.RedisSerializationContext;
import reactor.core.publisher.Mono;

import java.lang.reflect.ParameterizedType;
import java.util.function.Function;

abstract class ReactiveTemplateAdapterOperations<E, K, V> {
    private final val template :ReactiveRedisTemplate<K, V> ;
    private final val dataClass :Class<V> ;
    protected val mapper :ObjectMapper ;
    private final val toEntityFn :Function<V, E> ;

    @SuppressWarnings("unchecked")
    fun ReactiveTemplateAdapterOperations(val connectionFactory :ReactiveRedisConnectionFactory ,val mapper :ObjectMapper ,val toEntityFn :Function<V, E> ) {
        this.mapper = mapper;
        ParameterizedType genericSuperclass = (ParameterizedType) this.getClass().getGenericSuperclass();
        this.dataClass = (Class<V>) genericSuperclass.getActualTypeArguments()[2];
        this.toEntityFn = toEntityFn;

        var serializationContext :RedisSerializationContext<K, V> =
                RedisSerializationContext.<K, V>newSerializationContext(new Jackson2JsonRedisSerializer<>(dataClass))
                        .build();

        template = new ReactiveRedisTemplate<>(connectionFactory, serializationContext);
    }

    fun save(val key :K  ,val entity :E ) :Mono<E> {
        return Mono.just(entity)
                .map(this::toValue)
                .flatMap(value -> template.opsForValue().set(key, value))
                .thenReturn(entity);
    }

    fun save(val key :K ,val entity :E ,val expirationMillis :long ) :Mono<E> {
        return save(key, entity)
                .flatMap(v -> template.expire(key, Duration.ofMillis(expirationMillis)).thenReturn(v));
    }

    fun findById(val key :K) :Mono<E> {
        return template.opsForValue().get(key)
                .map(this::toEntity);
    }

    protected fun toValue(entity :E ) :V {
        return mapper.map(entity, dataClass);
    }

    protected fun toEntity(val data :V ) :E {
        return data != null ? toEntityFn.apply(data) : null;
    }

}
