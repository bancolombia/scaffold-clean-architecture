package {{package}}.sqs.sender.config;

import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean
import org.springframework.context.annotation.Bean
import org.springframework.context.annotation.Configuration
import software.amazon.awssdk.auth.credentials.*
import software.amazon.awssdk.core.client.config.ClientOverrideConfiguration
import software.amazon.awssdk.metrics.MetricPublisher
import software.amazon.awssdk.regions.Region
import software.amazon.awssdk.services.sqs.SqsAsyncClient
import java.net.URI

@Configuration
@ConditionalOnMissingBean(SqsAsyncClient::class)
class SqsSenderConfig {


    @Bean
    fun configSqs(properties: SqsSenderProperties, publisher: MetricPublisher?): SqsAsyncClient {
            return SqsAsyncClient.builder().endpointOverride(resolveEndpoint(properties))
            .region(Region.of(properties.region)).overrideConfiguration {
            o: ClientOverrideConfiguration.Builder -> o.addMetricPublisher(publisher)}
            .credentialsProvider(providerChain).build()
}

    private val providerChain: AwsCredentialsProviderChain
    private get() = AwsCredentialsProviderChain.builder()
        .addCredentialsProvider(EnvironmentVariableCredentialsProvider.create())
        .addCredentialsProvider(SystemPropertyCredentialsProvider.create())
        .addCredentialsProvider(WebIdentityTokenFileCredentialsProvider.create())
        .addCredentialsProvider(ProfileCredentialsProvider.create())
        .addCredentialsProvider(ContainerCredentialsProvider.builder().build())
        .addCredentialsProvider(InstanceProfileCredentialsProvider.create())
        .build()

    private fun resolveEndpoint(properties: SqsSenderProperties): URI? {
         return URI.create(properties.endpoint)
    }
}