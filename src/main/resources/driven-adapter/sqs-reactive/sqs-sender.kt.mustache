package {{package}}.sqs.sender;

import {{package}}.sqs.sender.config.SqsSenderProperties;
import lombok.AllArgsConstructor
import lombok.extern.log4j.Log4j2
import org.springframework.stereotype.Service
import reactor.core.publisher.Mono
import software.amazon.awssdk.services.sqs.SqsAsyncClient
import software.amazon.awssdk.services.sqs.model.SendMessageRequest
import software.amazon.awssdk.services.sqs.model.SendMessageResponse

@Service
@Log4j2
@AllArgsConstructor
class SqsSender /*implements SomeGateway*/ {
private val properties: SqsSenderProperties? = null
private val client: SqsAsyncClient? = null

    fun send(message: String): Mono<String> {
        return Mono.fromCallable { buildRequest(message) }
            .flatMap { request: SendMessageRequest? ->
            Mono.fromFuture(client!!.sendMessage(request))
        }
        .map { obj: SendMessageResponse -> obj.messageId() }
        }

    private fun buildRequest(message: String): SendMessageRequest {
        return SendMessageRequest.builder()
            .queueUrl(properties!!.queueUrl)
            .messageBody(message)
            .build()
        }
    }