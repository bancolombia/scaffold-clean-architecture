package {{package}}.mq.sender;

import co.com.bancolombia.commons.jms.api.MQMessageSenderSync;
import co.com.bancolombia.commons.jms.mq.EnableMQMessageSender;
{{#lombok}}
import lombok.AllArgsConstructor;
{{/lombok}}
import org.springframework.stereotype.Component;
import reactor.core.publisher.Mono;

import javax.jms.Message;

@Component
{{#lombok}}
@AllArgsConstructor
{{/lombok}}
@EnableMQMessageSender
//@EnableMQSelectorMessageListener // Enable it to retrieve a specific message by correlationId
class SampleMQMessageSender /* implements SomeGateway */ {
      private val sender :MQMessageSenderSync;
//    private val MQTemporaryQueuesContainer container; // Inject it to reference a temporary queue
//    private val MQMessageSelectorListenerSync listener; // Inject it to retrieve a specific message by correlationId
    {{^lombok}}

    fun MyMessageSender(val sender :MQMessageSender) {
        this.sender = sender;
    }
    {{/lombok}}

    fun send(val message :String) :String {
        return sender.send(context -> {
            Message textMessage = context.createTextMessage(message);
//            textMessage.setJMSReplyTo(container.get("any-custom-value")); // Inject the reply to queue from container
            return textMessage;
        });
    }

    // Enable it to retrieve a specific message by correlationId
//    public String getResult(String correlationId) {
//        Message message = listener.getMessage(correlationId);
//        return extractResponse(message);
//    }
/
//    private String extractResponse(Message message) {
//        TextMessage textMessage = (TextMessage) message;
//        return textMessage.getText();
//    }
}
