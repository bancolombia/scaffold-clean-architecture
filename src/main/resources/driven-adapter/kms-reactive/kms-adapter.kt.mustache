package {{package}}.kms

import org.springframework.beans.factory.annotation.Value
import org.springframework.stereotype.Component
import org.springframework.util.Base64Utils
import reactor.core.publisher.Mono
import software.amazon.awssdk.core.SdkBytes
import software.amazon.awssdk.services.kms.KmsAsyncClient
import software.amazon.awssdk.services.kms.model.*

@Component
class KmsAdapter // implements ModelRepository from domain
    (
    private val kmsAsyncClient: KmsAsyncClient,
    @Value("\${adapters.aws.kms.keyId}")
    private val keyId: String
) {

    fun decrypt(secretKey: String, keyId: String): Mono<ByteArray> {
        return Mono.fromFuture(kmsAsyncClient.decrypt(getDecryptRequest(secretKey, keyId)))
            .map { obj: DecryptResponse -> obj.plaintext() }
            .map { obj: SdkBytes -> obj.asByteArray() }
            .switchIfEmpty(Mono.error(Throwable("Error decrypt secret")))
    }

    fun encrypt(secretKey: ByteArray): Mono<String> {
        return Mono.fromFuture(kmsAsyncClient.encrypt(getEncryptRequest(secretKey, keyId)))
            .map { obj: EncryptResponse -> obj.ciphertextBlob() }
            .map { obj: SdkBytes -> obj.asByteArray() }
            .map(Base64Utils::encodeToString)
            .switchIfEmpty(Mono.error(Throwable("Error encrypt secret")))
    }

    private fun getDecryptRequest(secretKey: String, keyId: String): DecryptRequest {
        val decodedSecretKey = Base64Utils.decodeFromString(secretKey)
        return DecryptRequest.builder()
            .ciphertextBlob(SdkBytes.fromByteArray(decodedSecretKey))
            .keyId(keyId)
            .build()
    }

    private fun getEncryptRequest(secretKey: ByteArray, keyId: String): EncryptRequest {
        return EncryptRequest.builder()
            .plaintext(SdkBytes.fromByteArray(secretKey))
            .encryptionAlgorithm(EncryptionAlgorithmSpec.SYMMETRIC_DEFAULT)
            .keyId(keyId)
            .build()
    }
}
