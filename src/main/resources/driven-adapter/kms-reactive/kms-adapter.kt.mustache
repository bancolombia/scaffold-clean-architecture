package {{package}}.kms

import org.springframework.beans.factory.annotation.Value
import org.springframework.stereotype.Component
import org.springframework.util.Base64Utils

import lombok.RequiredArgsConstructor
import reactor.core.publisher.Mono
import software.amazon.awssdk.core.SdkBytes
import software.amazon.awssdk.services.kms.KmsAsyncClient
import software.amazon.awssdk.services.kms.model.DecryptRequest
import software.amazon.awssdk.services.kms.model.EncryptRequest
import software.amazon.awssdk.services.kms.model.EncryptionAlgorithmSpec
@Component
class KmsAdapter(
    @Value("${adapters.aws.kms.keyId}")
    val keyId :String,
    val kmsAsyncClient :KmsAsyncClient
) // implements ModelRepository from domain
{
    fun decrypt(secretKey :String, keyId :String) =
        Mono.fromFuture(kmsAsyncClient.decrypt(getDecryptRequest(secretKey, keyId)))
        .map(DecryptResponse::plaintext)
        .map(SdkBytes::asByteArray)
        .switchIfEmpty(Mono.error(Throwable("Error decrypt secret")))

    fun  encrypt(secretKey :byte[]) =
         Mono.fromFuture(kmsAsyncClient.encrypt(getEncryptRequest(secretKey, keyId)))
        .map(EncryptResponse::ciphertextBlob)
        .map(SdkBytes::asByteArray)
        .map(Base64Utils::encodeToString)
        .switchIfEmpty(Mono.error(new Throwable("Error encrypt secret")))

    fun getDecryptRequest(secretKey :String, keyId :String) :DecryptRequest {
        val decodedSecretKey = Base64Utils.decodeFromString(secretKey)
        return DecryptRequest.builder()
        .ciphertextBlob(SdkBytes.fromByteArray(decodedSecretKey))
        .keyId(keyId)
        .build()
    }

    fun  getEncryptRequest(secretKey :byte[], keyId :String) =
    EncryptRequest.builder()
        .plaintext(SdkBytes.fromByteArray(secretKey))
        .encryptionAlgorithm(EncryptionAlgorithmSpec.SYMMETRIC_DEFAULT)
        .keyId(keyId)
        .build()

}