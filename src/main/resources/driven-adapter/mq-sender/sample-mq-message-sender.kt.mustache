package {{package}}.mq.sender

import co.com.bancolombia.commons.jms.api.MQMessageSender
import co.com.bancolombia.commons.jms.mq.EnableMQMessageSender
import org.springframework.stereotype.Component
import reactor.core.publisher.Mono
import javax.jms.JMSContext
import javax.jms.Message

@Component
@EnableMQMessageSender
//@EnableMQSelectorMessageListener // Enable it to retrieve a specific message by correlationId
class SampleMQMessageSender /* implements Gateway from domain */(
    private val sender: MQMessageSender,
//    private val container: MQQueuesContainer,// Inject it to reference a temporary queue
//    private val listener: MQMessageSelectorListener// Inject it to retrieve a specific message by correlationId
) {
    fun send(message: String): Mono<String> {
        return sender.send { context: JMSContext ->
            val textMessage: Message = context.createTextMessage(message)
                //textMessage.jmsReplyTo =
                    //container["any-custom-value"] // Inject the reply to queue from container
            textMessage
        }
    }
// Enable it to retrieve a specific message by correlationId
//    open fun getResult(correlationId: String): Mono<String> {
//        return listener.getMessage(correlationId)
//            .map(::extractResponse)
//    }
//
//    private fun extractResponse(message: Message): String {
//        val textMessage = message as TextMessage
//        return textMessage.text
//    }
}
