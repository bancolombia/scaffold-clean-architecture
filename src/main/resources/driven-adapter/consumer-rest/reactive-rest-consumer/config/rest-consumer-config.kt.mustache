package {{package}}.config

package co.com.bancolombia.config

import io.netty.handler.timeout.ReadTimeoutHandler
import io.netty.handler.timeout.WriteTimeoutHandler
import org.springframework.beans.factory.annotation.Value
import org.springframework.context.annotation.Bean
import org.springframework.context.annotation.Configuration
import org.springframework.http.HttpHeaders
import org.springframework.http.client.reactive.ClientHttpConnector
import org.springframework.http.client.reactive.ReactorClientHttpConnector
import org.springframework.web.reactive.function.client.WebClient
import reactor.netty.http.client.HttpClient

import static io.netty.channel.ChannelOption.CONNECT_TIMEOUT_MILLIS
import static java.util.concurrent.TimeUnit.MILLISECONDS

@Configuration
open class RestConsumerConfig(
    @Value("\${adapter.restconsumer.url}")
    val url :String,
    @Value("\${adapter.restconsumer.timeout}")
    val timeout :Int) {

    @Bean
    open fun getWebClient() : WebClient {
        return WebClient.builder()
            .baseUrl(url)
            .defaultHeader(HttpHeaders.CONTENT_TYPE, "application/json")
            .clientConnector(getClientHttpConnector())
            .build()
    }

    fun getClientHttpConnector() : ClientHttpConnector {
        /*
        IF YO REQUIRE APPEND SSL CERTIFICATE SELF SIGNED
        val sslContext : SslContext = SslContextBuilder.forClient().trustManager(InsecureTrustManagerFactory.INSTANCE)
                .build()*/
        return ReactorClientHttpConnector(HttpClient.create()
                //.secure(sslContextSpec -> sslContextSpec.sslContext(sslContext))
                .compress(true)
                .keepAlive(true)
                .option(CONNECT_TIMEOUT_MILLIS, timeout)
                .doOnConnected(connection -> {
                    connection.addHandlerLast(new ReadTimeoutHandler(timeout, MILLISECONDS))
                    connection.addHandlerLast(new WriteTimeoutHandler(timeout, MILLISECONDS))
                }))
    }

}
