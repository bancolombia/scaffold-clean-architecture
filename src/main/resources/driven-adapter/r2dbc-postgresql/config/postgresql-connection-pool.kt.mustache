package {{package}}.config;

import java.time.Duration;
import io.r2dbc.pool.ConnectionPool;
import io.r2dbc.pool.ConnectionPoolConfiguration;
import io.r2dbc.postgresql.PostgresqlConnectionConfiguration;
import io.r2dbc.postgresql.PostgresqlConnectionFactory;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
class PostgreSQLConnectionPool {
    // TODO: change pool connection properties based on your resources.
    const val INITIAL_SIZE :Int = 12;
    const val MAX_SIZE :Int = 15;
    const val MAX_IDLE_TIME :Int = 30;

	@Bean
	fun getConnectionConfig() :ConnectionPool {
        // TODO: change these properties for yours
		val pgProperties :PostgresqlConnectionProperties = PostgresqlConnectionProperties();
		pgProperties.setDatabase("postgres");
		pgProperties.setHost("localhost");
		pgProperties.setPort(5432);
		pgProperties.setUsername("postgres");
		pgProperties.setPassword("secret");
		pgProperties.setSchema("public");

		return buildConnectionConfiguration(pgProperties);
	}

	private fun buildConnectionConfiguration(properties :PostgresqlConnectionProperties) :ConnectionPool {
		PostgresqlConnectionConfiguration dbConfiguration = PostgresqlConnectionConfiguration.builder()
				.host(properties.getHost())
				.port(properties.getPort())
				.database(properties.getDatabase())
				.schema(properties.getSchema())
				.username(properties.getUsername())
				.password(properties.getPassword())
				.build();

        val poolConfiguration :ConnectionPoolConfiguration = ConnectionPoolConfiguration.builder()
                .connectionFactory(new PostgresqlConnectionFactory(dbConfiguration))
                .name("api-postgres-connection-pool")
                .initialSize(INITIAL_SIZE)
                .maxSize(MAX_SIZE)
                .maxIdleTime(Duration.ofMinutes(MAX_IDLE_TIME))
                .validationQuery("SELECT 1")
                .build();

		return ConnectionPool(poolConfiguration);
	}
}
