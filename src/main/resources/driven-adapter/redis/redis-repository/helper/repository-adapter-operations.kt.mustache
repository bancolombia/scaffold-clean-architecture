package {{package}}.redis.repository.helper;

import org.reactivecommons.utils.ObjectMapper;
import org.springframework.data.domain.Example;
import org.springframework.data.repository.CrudRepository;
import org.springframework.data.repository.query.QueryByExampleExecutor;

import java.lang.reflect.ParameterizedType;
import java.util.List;
import java.util.function.Function;
import java.util.stream.Collectors;

import static java.util.stream.StreamSupport.stream;

abstract class RepositoryAdapterOperations<E, D, I, R : CrudRepository<D, I> & QueryByExampleExecutor<D>> {
    val R repository;
    const val dataClass :Class<D> ;
    val ObjectMapper mapper;
    const val toEntityFn :Function<D, E> ;

    @SuppressWarnings("unchecked")
    fun RepositoryAdapterOperations( repository :R,  mapper :ObjectMapper, toEntityFn :Function<D, E> ) {
        this.repository = repository;
        this.mapper = mapper;
        val genericSuperclass :ParameterizedType = (ParameterizedType) this.getClass().getGenericSuperclass();
        this.dataClass = (Class<D>) genericSuperclass.getActualTypeArguments()[1];
        this.toEntityFn = toEntityFn;
    }

    fun toData( entity :E) :D {
        return mapper.map(entity, dataClass);
    }

    fun toEntity( data :D) :E {
        return data != null ? toEntityFn.apply(data) : null;
    }

    fun save( entity :E) :E {
        val data :D = toData(entity);
        return toEntity(saveData(data));
    }

    fun saveAllEntities( entities :List<E> ) :List<E> {
        val list :List<D> = entities.stream().map(this::toData).collect(Collectors.toList());
        return toList(saveData(list));
    }

    fun toList( iterable :Iterable<D>) :List<E>  {
        return stream(iterable.spliterator(), false).map(this::toEntity).collect(Collectors.toList());
    }

    fun saveData( data :D) :D {
        return repository.save(data);
    }

    fun saveData( data :List<D>) :Iterable<D> {
        return repository.saveAll(data);
    }

    fun findById( id :I) :E {
        return toEntity(repository.findById(id).orElse(null));
    }

    fun findByExample(val entity :E ) :List<E> {
        return toList(repository.findAll( Example.of(toData(entity))));
    }


    fun findAll() :List<E>{
        return toList(repository.findAll());
    }
}
