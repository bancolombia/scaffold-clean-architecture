package {{package}}.redis.template.helper;

import org.reactivecommons.utils.ObjectMapper;
import org.springframework.data.redis.connection.RedisConnectionFactory;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;

import java.lang.reflect.ParameterizedType;
import java.util.function.Function;

abstract class TemplateAdapterOperations<E, K, V> {
    const val template :RedisTemplate<K, V> ;
    const val dataClass :Class<V> ;
    protected val mapper :ObjectMapper;
    const val toEntityFn :Function<V, E> ;

    @SuppressWarnings("unchecked")
    fun TemplateAdapterOperations(val connectionFactory :RedisConnectionFactory, mapper :ObjectMapper, toEntityFn :Function<V, E> ) {
        this.mapper = mapper;
        val genericSuperclass :ParameterizedType = (ParameterizedType) this.getClass().getGenericSuperclass();
        this.dataClass = (Class<V>) genericSuperclass.getActualTypeArguments()[2];
        this.toEntityFn = toEntityFn;

        template = new RedisTemplate<>();
        template.setConnectionFactory(connectionFactory);
        template.setDefaultSerializer(new Jackson2JsonRedisSerializer<>(dataClass));
        template.afterPropertiesSet();
    }

    fun save(val key :K, val entity :E) :E{
        template.opsForValue().set(key, toValue(entity));
        return entity;
    }

    fun save(val key :K, val entity :E, val expirationMillis :long) :E {
        E result = save(key, entity);
        template.expire(key, Duration.ofMillis(expirationMillis));
        return result;
    }

    fun findById(val key :K) :E {
        return toEntity(template.opsForValue().get(key));
    }

    protected toValue(val entity :E) :V {
        return mapper.map(entity, dataClass);
    }

    protected toEntity(val data :V) :E {
        return data != null ? toEntityFn.apply(data) : null;
    }

}
