package {{package}}.s3.operations

import org.springframework.stereotype.Component
import reactor.core.publisher.Mono
import software.amazon.awssdk.core.ResponseBytes
import software.amazon.awssdk.core.async.AsyncRequestBody
import software.amazon.awssdk.core.async.AsyncResponseTransformer
import software.amazon.awssdk.services.s3.S3AsyncClient
import software.amazon.awssdk.services.s3.model.*
import java.io.File
import java.io.InputStream


@Component
class S3Operations(private val s3AsyncClient: S3AsyncClient) {
    fun uploadObject(
        bucketName: String,
        objectKey: String,
        fileContent: ByteArray?
    ): Mono<Boolean> {
        return Mono.fromFuture(
            s3AsyncClient.putObject(
                configurePutObject(bucketName, objectKey),
                AsyncRequestBody.fromBytes(fileContent)
            )
        )
            .map { response: PutObjectResponse ->
                response.sdkHttpResponse().isSuccessful
            }
    }

    fun uploadObject(bucketName: String, objectKey: String, fileContent: String?): Mono<Boolean> {
        return Mono.fromFuture(
            s3AsyncClient.putObject(
                configurePutObject(bucketName, objectKey),
                AsyncRequestBody.fromString(fileContent)
            )
        )
            .map { response: PutObjectResponse ->
                response.sdkHttpResponse().isSuccessful
            }
    }

    fun uploadObject(bucketName: String, objectKey: String, fileContent: File?): Mono<Boolean> {
        return Mono.fromFuture(
            s3AsyncClient.putObject(
                configurePutObject(bucketName, objectKey),
                AsyncRequestBody.fromFile(fileContent)
            )
        )
            .map { response: PutObjectResponse ->
                response.sdkHttpResponse().isSuccessful
            }
    }

    fun listBucketObjects(bucketName: String?): Mono<List<S3Object>> {
        return Mono.fromFuture(
            s3AsyncClient.listObjects(
                ListObjectsRequest
                    .builder()
                    .bucket(bucketName)
                    .build()
            )
        ).map { response: ListObjectsResponse -> response.contents() }
    }

    fun getObject(bucketName: String?, objectKey: String?): Mono<InputStream> {
        return Mono.fromFuture(
            s3AsyncClient.getObject(
                GetObjectRequest.builder()
                    .key(objectKey)
                    .bucket(bucketName)
                    .build(), AsyncResponseTransformer.toBytes()
            )
        )
            .map { response: ResponseBytes<GetObjectResponse> -> response.asInputStream() }
    }

    fun deleteObject(bucketName: String?, objectKey: String?): Mono<Boolean> {
        return Mono.fromFuture(
            s3AsyncClient.deleteObject(
                DeleteObjectRequest.builder()
                    .key(objectKey)
                    .bucket(bucketName).build()
            )
        )
            .map { response: DeleteObjectResponse ->
                response.sdkHttpResponse().isSuccessful
            }
    }

    private fun configurePutObject(bucketName: String, objectKey: String): PutObjectRequest {
        return PutObjectRequest.builder()
            .bucket(bucketName)
            .key(objectKey)
            .build()
    }
}
