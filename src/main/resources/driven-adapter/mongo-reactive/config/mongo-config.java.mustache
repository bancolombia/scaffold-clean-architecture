package {{package}}.mongo.config;

{{#include-secret}}
import co.com.bancolombia.secretsmanager.api.exceptions.SecretException;
import co.com.bancolombia.secretsmanager.api.GenericManagerAsync;
import org.springframework.beans.factory.annotation.Value;
{{/include-secret}}
import {{package}}.mongo.config.MongoDBSecret;
import org.springframework.boot.autoconfigure.mongo.ReactiveMongoClientFactory;
import org.springframework.boot.autoconfigure.mongo.MongoClientSettingsBuilderCustomizer;
import org.springframework.boot.autoconfigure.mongo.MongoProperties;
import org.springframework.boot.autoconfigure.mongo.MongoPropertiesClientSettingsBuilderCustomizer;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.env.Environment;

import java.util.ArrayList;
import java.util.List;

@Configuration
public class MongoConfig {

    {{#include-secret}}
    @Bean
    public MongoDBSecret dbSecret(@Value("${aws.secretName}") String secret, GenericManagerAsync manager)
            throws SecretException {
        return manager.getSecret(secret, MongoDBSecret.class).block();
    }
    {{/include-secret}}
    {{^include-secret}}
    @Bean
    public MongoDBSecret dbSecret(Environment env) {
        return MongoDBSecret.builder()
                .uri(env.getProperty("spring.data.mongodb.uri"))
                .build();
    }
    {{/include-secret}}

    @Bean
    public ReactiveMongoClientFactory mongoProperties(MongoDBSecret secret, Environment env) {
        MongoProperties properties = new MongoProperties();
        properties.setUri(secret.getUri());

        List<MongoClientSettingsBuilderCustomizer> list = new ArrayList<>();
        list.add(new MongoPropertiesClientSettingsBuilderCustomizer(properties, env));
        return new ReactiveMongoClientFactory(list);
    }
}
