package {{package}}.dynamodb.helper

import org.reactivecommons.utils.ObjectMapper
import reactor.core.publisher.Mono
import software.amazon.awssdk.core.async.SdkPublisher
import software.amazon.awssdk.enhanced.dynamodb.DynamoDbAsyncIndex
import software.amazon.awssdk.enhanced.dynamodb.DynamoDbAsyncTable
import software.amazon.awssdk.enhanced.dynamodb.DynamoDbEnhancedAsyncClient
import software.amazon.awssdk.enhanced.dynamodb.Key
import software.amazon.awssdk.enhanced.dynamodb.TableSchema
import software.amazon.awssdk.enhanced.dynamodb.model.Page
import software.amazon.awssdk.enhanced.dynamodb.model.PagePublisher
import software.amazon.awssdk.enhanced.dynamodb.model.QueryEnhancedRequest
import software.amazon.awssdk.services.dynamodb.model.AttributeValue
import java.lang.reflect.ParameterizedType
import java.util.function.Function


abstract class TemplateAdapterOperations<E, K, V> protected constructor(
    dynamoDbEnhancedAsyncClient: DynamoDbEnhancedAsyncClient,
    private var mapper: ObjectMapper,
    private val toEntityFn: Function<V, E>,
    tableName: String,
    vararg index: String
) {
    private val dataClass: Class<V>
    private val table: DynamoDbAsyncTable<V>
    private val tableByIndex: DynamoDbAsyncIndex<V>?

    init {
        val genericSuperclass = this.javaClass.genericSuperclass as ParameterizedType
        this.dataClass = genericSuperclass.actualTypeArguments[2] as Class<V>
        table = dynamoDbEnhancedAsyncClient.table(tableName, TableSchema.fromBean(dataClass))
        tableByIndex = if (index.isNotEmpty()) table.index(index[0]) else null
    }

    fun save(model: E & Any): Mono<E> {
        return Mono.fromFuture(table.putItem(toEntity(model))).thenReturn(model)
    }

    fun getById(id: K): Mono<E> {
        return Mono.fromFuture(
            table.getItem(
                Key.builder()
                    .partitionValue(AttributeValue.builder().s(id as String).build())
                    .build()
            )
        )
            .map { data: V -> this.toModel(data) }
    }

    fun delete(model: E): Mono<E> {
        return Mono.fromFuture(table.deleteItem(toEntity(model))).map { data: V ->
            this.toModel(
                data
            )
        }
    }

    fun query(queryExpression: QueryEnhancedRequest): Mono<List<E>> {
        val pagePublisher = table.query(queryExpression)
        return listOfModel(pagePublisher)
    }

    fun queryByIndex(queryExpression: QueryEnhancedRequest, vararg index: String?): Mono<List<E>> {
        val queryIndex = if (index.isNotEmpty()) table.index(index[0]) else tableByIndex!!

        val pagePublisher = queryIndex.query(queryExpression)
        return listOfModel(pagePublisher)
    }

    /**
     * @return Mono<List></List> < E>>
     * @implNote Bancolombia does not suggest the Scan function for DynamoDB tables due to the low performance resulting
     * from the design of the database engine (Key value). Optimize the query using Query, GetItem or BatchGetItem
     * functions, and if necessary, consider the Single-Table Design pattern for DynamoDB.
     */
    @Deprecated("")
    fun scan(): Mono<List<E>> {
        return listOfModel(table.scan())
    }

    private fun listOfModel(pagePublisher: PagePublisher<V>): Mono<List<E>> {
        return Mono.from(pagePublisher).map { page: Page<V> ->
            page.items().stream().map { data: V -> this.toModel(data) }.toList() as List<E>?
        }
    }

    private fun listOfModel(pagePublisher: SdkPublisher<Page<V>>): Mono<List<E>> {
        return Mono.from(pagePublisher).map { page: Page<V> ->
            page.items().stream().map { data: V -> this.toModel(data) }.toList() as List<E>?
        }
    }

    private fun toEntity(model: E): V {
        return mapper.map(model, dataClass)
    }

    private fun toModel(data: V?): E? {
        return if (data != null) toEntityFn.apply(data) else null
    }
}
