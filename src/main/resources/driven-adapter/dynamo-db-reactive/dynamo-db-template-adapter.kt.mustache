package {{package}}.dynamodb

import {{package}}.dynamodb.helper.TemplateAdapterOperations
import org.reactivecommons.utils.ObjectMapper
import org.springframework.stereotype.Repository
import reactor.core.publisher.Mono
import software.amazon.awssdk.enhanced.dynamodb.DynamoDbEnhancedAsyncClient
import software.amazon.awssdk.enhanced.dynamodb.Key
import software.amazon.awssdk.enhanced.dynamodb.model.QueryConditional
import software.amazon.awssdk.enhanced.dynamodb.model.QueryEnhancedRequest
import java.util.function.Function


@Repository
open class DynamoDBTemplateAdapter(connectionFactory: DynamoDbEnhancedAsyncClient, mapper: ObjectMapper) :
    TemplateAdapterOperations<Any /*domain model*/, String, ModelEntity /*adapter model*/>(
        connectionFactory, mapper,
        Function { d: ModelEntity ->
            mapper.map(
                d,
                Any::class.java /*domain model*/
            )
        }, "table_name", "secondary_index" /*index is optional*/
    ) /*Gateway from domain*/ {
    fun getEntityBySomeKeys(partitionKey: String, sortKey: String): Mono<List<Any>> {
        val queryExpression = generateQueryExpression(partitionKey, sortKey)
        return query(queryExpression)
    }

    fun getEntityBySomeKeysByIndex(partitionKey: String, sortKey: String): Mono<List<Any>> {
        val queryExpression = generateQueryExpression(partitionKey, sortKey)
        return queryByIndex(queryExpression, "secondary_index" /*index is optional if you define in constructor*/)
    }

    private fun generateQueryExpression(partitionKey: String, sortKey: String): QueryEnhancedRequest {
        return QueryEnhancedRequest.builder()
            .queryConditional(QueryConditional.keyEqualTo(Key.builder().partitionValue(partitionKey).build()))
            .queryConditional(QueryConditional.sortGreaterThanOrEqualTo(Key.builder().sortValue(sortKey).build()))
            .build()
    }
}