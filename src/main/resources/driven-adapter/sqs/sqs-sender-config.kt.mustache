package {{package}}.sqs.sender.config;

import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean
import software.amazon.awssdk.services.sqs.SqsAsyncClient
import org.springframework.context.annotation.Bean
import org.springframework.context.annotation.Configuration
import software.amazon.awssdk.metrics.MetricPublisher
import software.amazon.awssdk.core.client.config.ClientOverrideConfiguration
import software.amazon.awssdk.auth.credentials.AwsCredentialsProviderChain
import software.amazon.awssdk.auth.credentials.EnvironmentVariableCredentialsProvider
import software.amazon.awssdk.auth.credentials.SystemPropertyCredentialsProvider
import software.amazon.awssdk.auth.credentials.WebIdentityTokenFileCredentialsProvider
import software.amazon.awssdk.auth.credentials.ProfileCredentialsProvider
import software.amazon.awssdk.auth.credentials.ContainerCredentialsProvider
import software.amazon.awssdk.auth.credentials.InstanceProfileCredentialsProvider
import software.amazon.awssdk.regions.Region
import java.net.URI

@Configuration
@ConditionalOnMissingBean(SqsAsyncClient::class)
class SqsSenderConfig {
    @Bean
    fun configSqs(properties: SqsSenderProperties, publisher: MetricPublisher?): SqsAsyncClient {
        return SqsAsyncClient.builder()
            .endpointOverride(resolveEndpoint(properties))
            .region(Region.of(properties.region))
            .overrideConfiguration { o: ClientOverrideConfiguration.Builder ->
                o.addMetricPublisher(
                    publisher
                )
            }
            .credentialsProvider(providerChain)
            .build()
    }

    private val providerChain: AwsCredentialsProviderChain
        private get() = AwsCredentialsProviderChain.builder()
        .addCredentialsProvider(EnvironmentVariableCredentialsProvider.create())
        .addCredentialsProvider(SystemPropertyCredentialsProvider.create())
        .addCredentialsProvider(WebIdentityTokenFileCredentialsProvider.create())
        .addCredentialsProvider(ProfileCredentialsProvider.create())
        .addCredentialsProvider(ContainerCredentialsProvider.builder().build())
        .addCredentialsProvider(InstanceProfileCredentialsProvider.create())
        .build()

    private fun resolveEndpoint(properties: SqsSenderProperties): URI? {
        return if (properties.endpoint != null) {
            URI.create(properties.endpoint)
        } else null
    }
}