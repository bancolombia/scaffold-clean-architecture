package {{package}}.config;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.DependsOn;
import org.springframework.core.annotation.Order;

import co.com.bancolombia.model.topiccredentials.ConsumerCredentials;
import co.com.bancolombia.secretsmanager.api.GenericManagerAsync;
import co.com.bancolombia.secretsmanager.api.exceptions.SecretException;
import co.com.bancolombia.secretsmanager.config.AWSSecretsManagerConfig;
import co.com.bancolombia.secretsmanager.connector.AWSSecretManagerConnectorAsync;
import software.amazon.awssdk.regions.Region;

@Configuration
class KafkaOauthSecretsConfig {

    @Bean("getSecret")
    @Order(1)
    GenericManagerAsync getSecretManager(@Value("${aws.region}") String region) {
        return new AWSSecretManagerConnectorAsync(buildSecretsManagerConfig(region));
    }

    private AWSSecretsManagerConfig buildSecretsManagerConfig(String region) {
        return AWSSecretsManagerConfig.builder()
                .region(Region.of(region))
                .cacheSize(100)
                .cacheSeconds(100)
                .build();
    }

    @Bean
    @DependsOn("getSecret")
    ConsumerCredentials getStrimziKafkaCredentials(
            @Value("${aws.region}") String region,
            @Value("${aws.strimzi-kafka-secretName}") String secretName
    ) throws SecretException {
        return getSecretManager(region)
                .getSecret(secretName, ConsumerCredentials.class)
                .block();
    }
}
