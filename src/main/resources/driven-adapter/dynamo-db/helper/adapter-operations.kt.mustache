package {{package}}.dynamodb.helper

import org.reactivecommons.utils.ObjectMapper
import software.amazon.awssdk.core.pagination.sync.SdkIterable
import software.amazon.awssdk.enhanced.dynamodb.DynamoDbEnhancedClient
import software.amazon.awssdk.enhanced.dynamodb.DynamoDbIndex
import software.amazon.awssdk.enhanced.dynamodb.DynamoDbTable
import software.amazon.awssdk.enhanced.dynamodb.Key
import software.amazon.awssdk.enhanced.dynamodb.TableSchema
import software.amazon.awssdk.enhanced.dynamodb.model.Page
import software.amazon.awssdk.enhanced.dynamodb.model.PageIterable
import software.amazon.awssdk.enhanced.dynamodb.model.QueryEnhancedRequest
import software.amazon.awssdk.services.dynamodb.model.AttributeValue
import java.lang.reflect.ParameterizedType
import java.util.function.Function


abstract class TemplateAdapterOperations<E, K, V> protected constructor(
    dynamoDbEnhancedClient: DynamoDbEnhancedClient,
    private var mapper: ObjectMapper,
    private val toEntityFn: Function<V, E>,
    tableName: String,
    vararg index: String
) {
    private val dataClass: Class<V>
    private val table: DynamoDbTable<V>
    private val tableByIndex: DynamoDbIndex<V>?

    init {
        val genericSuperclass = this.javaClass.genericSuperclass as ParameterizedType
        this.dataClass = genericSuperclass.actualTypeArguments[2] as Class<V>
        table = dynamoDbEnhancedClient.table(tableName, TableSchema.fromBean(dataClass))
        tableByIndex = if (index.isNotEmpty()) table.index(index[0]) else null
    }

    fun save(model: E): E? {
        val entity = toEntity(model)
        table.putItem(entity)
        return toModel(entity)
    }

    fun getById(id: K): E? {
        return toModel(
            table.getItem(
                Key.builder()
                    .partitionValue(AttributeValue.builder().s(id as String).build())
                    .build()
            )
        )
    }

    fun delete(model: E) {
        table.deleteItem(toEntity(model))
    }

    fun query(queryExpression: QueryEnhancedRequest): List<E> {
        val pageIterable = table.query(queryExpression)
        return listOfModel(pageIterable)
    }

    fun queryByIndex(queryExpression: QueryEnhancedRequest, vararg index: String?): List<E> {
        val queryIndex = if (index.isNotEmpty()) table.index(index[0]) else tableByIndex!!
        val sdkIterable = queryIndex.query(queryExpression)
        return listOfModel(sdkIterable)
    }

    /**
     * @return Mono<List></List> < E>>
     * @implNote Bancolombia does not suggest the Scan function for DynamoDB tables due to the low performance resulting
     * from the design of the database engine (Key value). Optimize the query using Query, GetItem or BatchGetItem
     * functions, and if necessary, consider the Single-Table Design pattern for DynamoDB.
     */
    @Deprecated("")
    fun scan(): List<E> {
        return listOfModel(table.scan())
    }

    private fun listOfModel(pageIterable: PageIterable<V>): List<E> {
        return pageIterable.items().stream().map { data: V -> this.toModel(data) }.toList().mapNotNull { it }
    }

    private fun listOfModel(pageIterable: SdkIterable<Page<V>>): List<E> {
        return pageIterable.stream().flatMap { p: Page<V> ->
            p.items().stream().map { data: V -> this.toModel(data) }
        }.toList().mapNotNull { it }
    }

    private fun toEntity(model: E): V {
        return mapper.map(model, dataClass)
    }

    private fun toModel(data: V?): E? {
        return if (data != null) toEntityFn.apply(data) else null
    }
}
