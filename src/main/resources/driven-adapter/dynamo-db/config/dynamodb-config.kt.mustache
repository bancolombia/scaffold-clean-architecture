package {{package}}.dynamodb.config

import org.springframework.beans.factory.annotation.Value
import org.springframework.context.annotation.Bean
import org.springframework.context.annotation.Configuration
import org.springframework.context.annotation.Profile
import software.amazon.awssdk.auth.credentials.ProfileCredentialsProvider
import software.amazon.awssdk.auth.credentials.WebIdentityTokenFileCredentialsProvider
import software.amazon.awssdk.enhanced.dynamodb.DynamoDbEnhancedClient
import software.amazon.awssdk.regions.Region
import software.amazon.awssdk.services.dynamodb.DynamoDbClient
import java.net.URI

@Configuration
open class DynamoDBConfig {
    @Bean
    @Profile("local")
    open fun amazonDynamoDBLocal(
        @Value("\${aws.region}") region: String,
        @Value("\${aws.dynamodb.endpoint}") endpoint: String
    ): DynamoDbClient {
        return DynamoDbClient.builder()
            .credentialsProvider(ProfileCredentialsProvider.create("default"))
            .region(Region.of(region))
            .endpointOverride(URI.create(endpoint))
            .build()
    }

    @Bean
    @Profile({"dev", "cer", "pdn"})
    open fun amazonDynamoDB(@Value("\${aws.region}") region: String): DynamoDbClient {
        return DynamoDbClient.builder()
            .credentialsProvider(WebIdentityTokenFileCredentialsProvider.create())
            .region(Region.of(region))
            .build()
    }

    @Bean
    open fun getDynamoDbEnhancedClient(client: DynamoDbClient): DynamoDbEnhancedClient {
        return DynamoDbEnhancedClient.builder()
            .dynamoDbClient(client)
            .build()
    }
}
