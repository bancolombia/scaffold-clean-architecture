allprojects {
    repositories {
        mavenCentral()
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
    }
}

subprojects {
    apply plugin: 'java'
    {{#jacoco}}
    apply plugin: 'jacoco'
    {{/jacoco}}
    {{#cobertura}}
    apply plugin: 'net.saliman.cobertura'
    {{/cobertura}}
    apply plugin: 'io.spring.dependency-management'

    compileJava.dependsOn validateStructure
    sourceCompatibility = JavaVersion.VERSION_1_8

    dependencies {
        {{#reactive}}
        implementation 'io.projectreactor:reactor-core'
        implementation 'io.projectreactor.addons:reactor-extra'

        testImplementation 'io.projectreactor:reactor-test'
        {{/reactive}}
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        {{#lombok}}
        compileOnly "org.projectlombok:lombok:${lombokVersion}"
        annotationProcessor  "org.projectlombok:lombok:${lombokVersion}"
        testCompileOnly  "org.projectlombok:lombok:${lombokVersion}"
        testAnnotationProcessor  "org.projectlombok:lombok:${lombokVersion}"
        {{/lombok}}
        implementation platform("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
    }

    {{#jacoco}}
    test.finalizedBy(project.tasks.jacocoTestReport)

    jacocoTestReport {
        dependsOn test
        reports {
            xml.enabled true
            xml.destination file("${buildDir}/reports/jacoco.xml")
            csv.enabled false
            html.destination file("${buildDir}/reports/jacocoHtml")
        }
    }
    {{/jacoco}}
    {{#cobertura}}
    test.finalizedBy(project.tasks.cobertura)

    cobertura {
        coverageFormats = [ 'xml', 'html' ]
    }
    {{/cobertura}}

}

{{#jacoco}}
jacoco {
    toolVersion = "${jacocoVersion}"
    reportsDir = file("$buildDir/reports")
}

task jacocoMergedReport(type: JacocoReport) {
    dependsOn = subprojects.jacocoTestReport
    additionalSourceDirs.setFrom files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories.setFrom files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories.setFrom files(subprojects.sourceSets.main.output)
    executionData.setFrom project.fileTree(dir: '.', include: '**/build/jacoco/test.exec')
    reports {
        xml.enabled true
        csv.enabled false
        html.enabled true
    }
}
{{/jacoco}}
{{#cobertura}}
def files = subprojects.collect { new File(it.projectDir, '/build/cobertura/cobertura.ser') }

cobertura {
    coverageFormats = ['xml', 'html']
    coverageSourceDirs = subprojects.sourceSets.main.allSource.srcDirs.flatten()
    coverageMergeDatafiles = files
}

test.finalizedBy(project.tasks.cobertura)
{{/cobertura}}

tasks.withType(JavaCompile) {
    options.compilerArgs = [
            '-Amapstruct.suppressGeneratorTimestamp=true'
    ]
}
tasks.named('wrapper') {
  gradleVersion = '{{gradleVersion}}'
 }
