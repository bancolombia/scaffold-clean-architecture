package {{package}}.mq.listener;

import co.com.bancolombia.commons.jms.mq.MQListener;
{{#metrics}}
import io.micrometer.core.instrument.Metrics;
import io.micrometer.core.instrument.Timer;
{{/metrics}}
{{#lombok}}
import lombok.AllArgsConstructor;
{{/lombok}}
import org.springframework.stereotype.Component;
import reactor.core.publisher.Mono;

import javax.jms.JMSException;
import javax.jms.Message;
import javax.jms.TextMessage;
{{#metrics}}
import java.util.concurrent.TimeUnit;
{{/metrics}}

@Component
{{#lombok}}
@AllArgsConstructor
{{/lombok}}
public class SampleMQMessageListener {
    {{#metrics}}
    private final Timer timer = Metrics.timer("mq_receive_message", "operation", "my-operation"); // TODO: Change operation name
    {{/metrics}}
    // private final SampleUseCase useCase;

    {{^lombok}}
    public SampleMQMessageListener(/*SampleUseCase useCase*/) {
        // this.useCase = useCase;
    }

    {{/lombok}}
    // For fixed queues
    @MQListener
    public void process(Message message) throws JMSException {
        {{#metrics}}
        timer.record(System.currentTimeMillis() - message.getJMSTimestamp(), TimeUnit.MILLISECONDS);
        {{/metrics}}
        String text = ((TextMessage) message).getText();
        // useCase.sample(text);
    }

    // For an automatic generated temporary queue
    // @MQListener(tempQueueAlias = "any-custom-value")
    // public void processFromTemporaryQueue(Message message) throws JMSException {
    {{#metrics}}
    //     timer.record(System.currentTimeMillis() - message.getJMSTimestamp(), TimeUnit.MILLISECONDS);
    {{/metrics}}
    //     String text = ((TextMessage) message).getText();
    //     // useCase.sample(text);
    // }
}
