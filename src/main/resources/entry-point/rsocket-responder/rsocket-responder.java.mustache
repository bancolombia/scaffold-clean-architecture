package {{package}}.controller;

{{#lombok}}
    import lombok.RequiredArgsConstructor;
{{/lombok}}
import org.springframework.messaging.handler.annotation.MessageMapping;
import org.springframework.stereotype.Controller;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

@Controller
{{#lombok}}
    @RequiredArgsConstructor
{{/lombok}}
public class RsocketController {

//  private final MyUseCase useCase;

    // interaction model Request/Response
    @MessageMapping(value = "route.request.response")
    public Mono<Object/* change for object response */> addBlog(Object objRequest/* change for object request */) {
        // return useCase.doAction();
        return Mono.empty();
    }

    // interaction model Request/Stream
    @MessageMapping(value = "route.request.stream")
    public Flux<Object/* change for object response */> getAllBlog() {
        // return useCase.doAction();
        return Flux.empty();
    }

    // interaction model Fire-and-Forget
    @MessageMapping(value = "route.fire.forget")
    public void addBlogFireAndForget(Object objRequest/* change for object request */) {
        // return useCase.doAction(objRequest);
    }

    // interaction model Channel
    @MessageMapping(value = "route.channel")
    public Flux<Object/* change for object response */> testChannel(Flux<Object/* change for object request */> objRequest) {
        // return useCase.doAction(objRequest);
        return Flux.empty();
    }

}