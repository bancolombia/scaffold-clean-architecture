package {{package}}.events.handlers;

{{#lombok}}
import lombok.AllArgsConstructor;
{{/lombok}}
import org.reactivecommons.api.domain.Command;
import org.reactivecommons.async.impl.config.annotations.EnableCommandListeners;
import reactor.core.publisher.Mono;
{{#eda}}
import io.cloudevents.CloudEvent;
{{/eda}}

{{#lombok}}
@AllArgsConstructor
{{/lombok}}
@EnableCommandListeners
public class CommandsHandler {
//    private final SampleUseCase sampleUseCase;

{{^lombok}}
    public CommandsHandler(/*SampleUseCase sampleUseCase*/) {
        //this.sampleUseCase = sampleUseCase;
    }
{{/lombok}}
{{#eda}}
    public Mono<Void> handleCommandA(Command<CloudEvent> command) {
        System.out.println("command received: " + command.getName() + " ->" + command.getData()); // TODO: Remove this line
//        return sampleUseCase.doSomething(command.getData());
        return Mono.empty();
    }
{{/eda}}
{{^eda}}
    public Mono<Void> handleCommandA(Command<Object/*change for proper model*/> command) {
        System.out.println("command received: " + command.getName() + " ->" + command.getData()); // TODO: Remove this line
//        return sampleUseCase.doSomething(command.getData());
        return Mono.empty();
    }
{{/eda}}

}
