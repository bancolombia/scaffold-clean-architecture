package {{package}}.events.handlers;

{{#eda}}
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.core.JsonProcessingException;
import io.cloudevents.CloudEvent;
import io.cloudevents.core.builder.CloudEventBuilder;
import org.reactivecommons.async.commons.converters.json.DefaultObjectMapperSupplier;
import java.net.URI;
import java.util.UUID;
{{/eda}}
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import reactor.test.StepVerifier;

class QueriesHandlerTest {
    private QueriesHandler queriesHandler;

    @BeforeEach
    void setUp() {
        queriesHandler = new QueriesHandler({{#eda}}new DefaultObjectMapperSupplier().get(){{/eda}});
    }

    {{#eda}}
    @Test
    void queriesHandlerTest() throws JsonProcessingException {
        ObjectMapper objectMapper = new ObjectMapper();
        CloudEvent query = CloudEventBuilder.v1() //
                .withId(UUID.randomUUID().toString()) //
                .withSource(URI.create("https://spring.io/foos"))//
                .withType("query")
                .withData("application/json", objectMapper.writeValueAsBytes("Data"))
                .build();
        StepVerifier.create(queriesHandler.handleQueryA(query))
                .expectNextMatches(response ->
                        response != null &&
                        "SOME_QUERY_REPLY".equals(response.getType()) &&
                        response.getData() != null
                )
                .verifyComplete();
    }
    {{/eda}}
    {{^eda}}
    @Test
    void queriesHandlerTest() {
    // Enviar una consulta con datos espec√≠ficos
        String query = "Data";
        
        // Verificar que el valor retornado sea el esperado
        StepVerifier.create(queriesHandler.handleQueryA(query))
            .expectNext("Response Data") // Verifica que el valor recibido sea "Response Data"
            .expectComplete()  // Verifica que el Mono se complete
            .verify();
    }
    {{/eda}}
}
