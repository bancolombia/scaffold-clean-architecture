package {{package}}.events.handlers;

{{#lombok}}
import lombok.AllArgsConstructor;
{{/lombok}}
import org.reactivecommons.api.domain.DomainEvent;
import org.reactivecommons.async.impl.config.annotations.EnableEventListeners;
import reactor.core.publisher.Mono;

{{#lombok}}
@AllArgsConstructor
{{/lombok}}
@EnableEventListeners
class EventsHandler constructor(sampleUseCase: SampleUseCase) {
//    final SampleUseCase sampleUseCase;

{{^lombok}}
    fun EventsHandler(/*SampleUseCase sampleUseCase*/) {
        //this.sampleUseCase = sampleUseCase;
    }
{{/lombok}}

    fun handleEventA(event :DomainEvent<Any/*change for proper model*/>):Mono<Unit> {
        fun println("event received: " + event.getName() + " ->" + event.getData()); // TODO: Remove this line
//        return sampleUseCase.doSomething(event.getData());
        return Mono.empty();
    }
}
