package {{package}}.events.handlers;

{{#lombok}}
import lombok.AllArgsConstructor;
{{/lombok}}
{{^eda}}
import org.reactivecommons.api.domain.DomainEvent;
{{/eda}}
import org.reactivecommons.async.impl.config.annotations.EnableEventListeners;
import reactor.core.publisher.Mono;
import lombok.extern.java.Log;
import java.util.logging.Level;
{{#eda}}
import io.cloudevents.CloudEvent;
{{/eda}}
@Log
{{#lombok}}
@AllArgsConstructor
{{/lombok}}
@EnableEventListeners
public class EventsHandler {
//    private final SampleUseCase sampleUseCase;

{{^lombok}}
    public EventsHandler(/*SampleUseCase sampleUseCase*/) {
        //this.sampleUseCase = sampleUseCase;
    }
{{/lombok}}
{{#eda}}
    public Mono<Void> handleEventA(CloudEvent event) {
        log.log(Level.INFO, "Event received: {0} -> {1}", new Object[]{event.getType(), event.getData()}); // TODO: Remove this line
//        return sampleUseCase.doSomething(event.getData());
        return Mono.empty();
    }
{{/eda}}

{{^eda}}
    public Mono<Void> handleEventA(DomainEvent<Object/*change for proper model*/> event) {
        log.log(Level.INFO, "Event received: {0} -> {1}", new Object[]{event.getName(), event.getData()}); // TODO: Remove this line
//        return sampleUseCase.doSomething(event.getData());
        return Mono.empty();
    }
{{/eda}}
}
