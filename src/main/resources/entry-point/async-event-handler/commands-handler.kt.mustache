package {{package}}.events.handlers;

{{#lombok}}
    import lombok.AllArgsConstructor;
{{/lombok}}
import org.reactivecommons.api.domain.Command;
import org.reactivecommons.async.impl.config.annotations.EnableCommandListeners;
import reactor.core.publisher.Mono;

{{#lombok}}
    @AllArgsConstructor
{{/lombok}}
@EnableCommandListeners
class CommandsHandler constructor(sampleUseCase: SampleUseCase) {
//    val sampleUseCase: SampleUseCase;

{{^lombok}}
    fun CommandsHandler(/*SampleUseCase sampleUseCase*/) {
    //this.sampleUseCase = sampleUseCase;
    }
{{/lombok}}

fun handleCommandA(command :Command<Any/*change for proper model*/>) : Mono<Unit> {
    System.out.println("command received: " + command.getName() + " ->" + command.getData()); // TODO: Remove this line
    //        return sampleUseCase.doSomething(command.getData());
    return Mono.empty();
    }
    }
