package {{package}}.api;

{{#lombok}}
import lombok.RequiredArgsConstructor;
{{/lombok}}
import org.springframework.stereotype.Component;
import org.springframework.web.reactive.function.server.ServerRequest;
import org.springframework.web.reactive.function.server.ServerResponse;
{{#task-param-authorize}}
import org.springframework.security.access.prepost.PreAuthorize;
{{/task-param-authorize}}
import reactor.core.publisher.Mono;

@Component
{{#lombok}}
@RequiredArgsConstructor
{{/lombok}}
public class HandlerV1 {
//private  final UseCase useCase;
//private  final UseCase2 useCase2;
{{^lombok}}
    public HandlerV1() {
    }
{{/lombok}}

{{#task-param-authorize}}
    @PreAuthorize("hasRole('permissionGET')")
{{/task-param-authorize}}
    public Mono<ServerResponse> listenGETUseCase(ServerRequest serverRequest) {
        // useCase.logic();
        return ServerResponse.ok().bodyValue("");
    }

{{#task-param-authorize}}
    @PreAuthorize("hasRole('permissionGETOther')")
{{/task-param-authorize}}
    public Mono<ServerResponse> listenGETOtherUseCase(ServerRequest serverRequest) {
        // useCase2.logic();
        return ServerResponse.ok().bodyValue("");
    }

{{#task-param-authorize}}
    @PreAuthorize("hasRole('permissionPOST')")
{{/task-param-authorize}}
    public Mono<ServerResponse> listenPOSTUseCase(ServerRequest serverRequest) {
        // useCase.logic();
        return ServerResponse.ok().bodyValue("");
    }
}
