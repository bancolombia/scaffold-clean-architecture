name: "gradle-actions"

on:
  release:
    types: [ published ]
  push:
    branches:
      - master
      - feature/*
      - fix/*

  pull_request:
    branches:
      - master

jobs:
  build:
    permissions:
      contents: write
      issues: write
      pull-requests: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin' 
          java-version: 11
      - uses: actions/setup-node@v2
        with:
          node-version: 18
      - run: npm -g install @semantic-release/git semantic-release && semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - run: npx semantic-release@21.0.2
        name: semantic version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Validate code formatting
        run: ./gradlew verGJF
      - name: Execute build test and report
        run: ./gradlew jacocoTestReport --refresh-dependencies --no-daemon --continue
      - name: copy the reportTest to codeCoverage
        run: cp build/reports/jacoco/report.xml jacoco.xml || echo "Code coverage failed"
      - name: Push codeCoverage to Codecov
        run: bash <(curl -s https://codecov.io/bash)
      - name: Run sonarqube
        if: github.event.pull_request.head.repo.fork == false
        run: ./gradlew sonarqube --stacktrace 
          -Dsonar.login=${{ secrets.SONAR_TOKEN }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      # Next steps will only run if generation code templates have been changed
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            templates:
              - 'src/main/resources/**'
      # Generated code Analysis
      - name: Publish local
        if: steps.changes.outputs.templates == 'true'
        run: ./publish_plugin_local.sh
      - name: Set up JDK 17
        if: steps.changes.outputs.templates == 'true'
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin' 
          java-version: 17
      # Generated code reactive
      - name: Generate project to scan
        if: steps.changes.outputs.templates == 'true'
        run: ./generate_project.sh reactive
      - name: Scan generated project dependencies
        if: steps.changes.outputs.templates == 'true'
        working-directory: ./build/toscan
        run: ./gradlew dependencyCheckAnalyze && ./gradlew it && cat applications/app-service/build/reports/dependency-check-sonar.json
      - name: Sonar analysis for generated project
        if: github.event.pull_request.head.repo.fork == false && steps.changes.outputs.templates == 'true'
        working-directory: ./build/toscan
        run: ./gradlew sonarqube --stacktrace
          -Dsonar.login=${{ secrets.SONAR_TOKEN_GENERATED }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      # Generated code reactive
      - name: Generate project to scan [imperative]
        if: steps.changes.outputs.templates == 'true'
        run: ./generate_project.sh imperative
      - name: Scan generated project dependencies [imperative]
        if: steps.changes.outputs.templates == 'true'
        working-directory: ./build/toscan
        run: ./gradlew dependencyCheckAnalyze && ./gradlew it && cat applications/app-service/build/reports/dependency-check-sonar.json
      - name: Sonar analysis for generated project [imperative]
        if: github.event.pull_request.head.repo.fork == false && steps.changes.outputs.templates == 'true'
        working-directory: ./build/toscan
        run: ./gradlew sonarqube --stacktrace
          -Dsonar.login=${{ secrets.SONAR_TOKEN_GENERATED_I }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      

  release:
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin' 
          java-version: 11
      - name: Set env
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
      - name: Upgrade README.md
        run: sed -i 's/version \".*\"/version "${{ env.RELEASE_VERSION }}"/g' README.md
      - name: Upgrade README.md
        run: sed -i 's/version \\".*\\"/version \\"${{ env.RELEASE_VERSION }}\\"/g' README.md
      - name: Upgrade Gradle.properties
        run: sed -i 's/version=.*/version=${{ env.RELEASE_VERSION }}/g' gradle.properties
      - name: Upgrade Constants.java
        run: sed -i 's/PLUGIN_VERSION = .*/PLUGIN_VERSION = "${{ env.RELEASE_VERSION }}";/g' src/main/java/co/com/bancolombia/Constants.java
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Generate Changelog
        uses: heinrichreimer/github-changelog-generator-action@v2.3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          pullRequests: true
          prWoLabels: true
          issues: true
          issuesWoLabels: true
          stripGeneratorNotice: true
      - name: Save version
        uses: github-actions-x/commit@v2.9
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          push-branch: "master"
          commit-message: 'upgrade version to ${{ env.RELEASE_VERSION }} version'
          force-add: "true"
          files: CHANGELOG.md README.md gradle.properties src/main/java/co/com/bancolombia/Constants.java
          name: Release Bot
          email: release-bot@bancolombia.com.co
      - name: Set Analytics Endpoint
        run: sed -i "s/ENDPOINT = \"\"/ENDPOINT = \"$ANALYTICS_ENDPOINT\"/g" src/main/java/co/com/bancolombia/analytics/AnalyticsExporter.java
        env:
          ANALYTICS_ENDPOINT: ${{ secrets.ANALYTICS_ENDPOINT }}
      - name: Publish plugin in gradle plugins
        run: ./gradlew publishPlugins -Pgradle.publish.key=${{ secrets.KEY_GRADLE }} -Pgradle.publish.secret=${{ secrets.SECRET_GRADLE }}
      - name: Publish plugin in github packages
        run: ./gradlew publish --info
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
